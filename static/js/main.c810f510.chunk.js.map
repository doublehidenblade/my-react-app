{"version":3,"sources":["Square.js","Board.js","Game.js","App.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","Board","row","col","board","cellCounter","i","columns","j","push","this","renderSquare","key","_this","src_Square","squares","createBoard","React","Component","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newRound","winner","title","concat","isRoomCreator","gameOver","Swal","fire","position","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","pubnub","publish","message","reset","channel","gameChannel","endGame","announceWinner","pieces","X","state","xScore","O","oScore","setState","checkForWinner","possibleCombinations","length","_possibleCombinations","slicedToArray","b","c","counter","publishMove","index","piece","whosTurn","onMakeMove","Array","fill","myTurn","_this2","getMessage","msg","close","status","_this3","src_Board","App","onPressCreate","e","roomId","shortid","generate","substring","lobbyChannel","subscribe","channels","withPresence","padding","isDisabled","onPressJoin","input","inputPlaceholder","joinRoom","hereNow","response","totalOccupancy","notRoomCreator","catch","error","console","log","isPlaying","unsubscribe","PubNubReact","publishKey","subscribeKey","init","assertThisInitialized","disabled","src_Game","xUsername","oUsername","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c810f510.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = props => ( \n  <button className={`square`} onClick={props.onClick}>\n    {props.value}\n  </button>\n);\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  // Create the 3 x 3 board\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";  \n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(''), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: this.props.myTurn\n    };\n\n    this.turn = 'X';\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount(){\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      // Publish move to the opponent's board\n      if(msg.message.turn === this.props.piece){\n        this.publishMove(msg.message.index, msg.message.piece);\n      }\n\n      // Start a new round\n      else if(msg.message.reset){\n        this.setState({\n          squares: Array(9).fill(''),\n          whosTurn : this.props.myTurn\n        });\n\n        this.turn = 'X';\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close()\n      }\n\n      // End the game and go back to the lobby\n      else if(msg.message.endGame){\n        Swal.close();\n        this.props.endGame();\n      }\n    });\n  }\n\n  newRound = (winner) => {\n    let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    if((this.props.isRoomCreator === false) && this.gameOver){\n      Swal.fire({  \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Waiting for a new round...',\n        confirmButtonColor: 'rgb(208,33,41)',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n        } ,\n      });\n      this.turn = 'X'; // Set turn to X so Player O can't make a move \n    } \n\n    // Show this to the room creator\n    else if(this.props.isRoomCreator && this.gameOver){\n      Swal.fire({      \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Continue Playing?',\n        showCancelButton: true,\n        confirmButtonColor: 'rgb(208,33,41)',\n        cancelButtonColor: '#aaa',\n        cancelButtonText: 'Nope',\n        confirmButtonText: 'Yea!',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n            cancelButton: 'button-class'\n        } ,\n      }).then((result) => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n\n        else{\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      })      \n    }\n   }\n\n\t// Update score for the winner\n  announceWinner = (winner) => {\n\t\tlet pieces = {\n\t\t\t'X': this.state.xScore,\n\t\t\t'O': this.state.oScore\n\t\t}\n\t\n\t\tif(winner === 'X'){\n\t\t\tpieces['X'] += 1;\n\t\t\tthis.setState({\n\t\t\t\txScore: pieces['X']\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t\tpieces['O'] += 1;\n\t\t\tthis.setState({\n\t\t\t\toScore: pieces['O']\n\t\t\t});\n\t\t}\n\t\t// End the game once there is a winner\n\t\tthis.gameOver = true;\n\t\tthis.newRound(winner);\t\n  }\n  \n  checkForWinner = (squares) => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n  \n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter++;\n    // The board is filled up and there is no winner\n    if(this.counter === 9){\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n   \n  // Opponent's move is published to the board\n  publishMove = (index, piece) => {\n    const squares = this.state.squares;\n\n    squares[index] = piece;\n    this.turn = (squares[index] === 'X')? 'O' : 'X';\n\n    this.setState({\n      squares: squares,\n      whosTurn: !this.state.whosTurn\n    });\n\n    this.checkForWinner(squares)\n  }\n\n  onMakeMove = (index) =>{\n    const squares = this.state.squares;\n\n    // Check if the square is empty and if it's the player's turn to make a move\n    if(!squares[index] && (this.turn === this.props.piece)){ \n      squares[index] = this.props.piece;\n\n      this.setState({\n        squares: squares,\n        whosTurn: !this.state.whosTurn\n      });\n  \n      // Other player's turn to make a move\n      this.turn = (this.turn === 'X') ? 'O' : 'X';\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          index: index,\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });  \n\n      // Check if there is a winner\n      this.checkForWinner(squares)\n    }\n  }\n\n  render() {\n    let status;\n    // Change to current player's turn\n    status = `${this.state.whosTurn ? \"Your turn\" : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <Board\n              squares={this.state.squares}\n              onClick={index => this.onMakeMove(index)}\n            />  \n            <p className=\"status-info\">{status}</p>        \n        </div>\n        \n        <div className=\"scores-container\">\n          <div>\n            <p>Player X: {this.state.xScore} </p>\n          </div>\n\n          <div>\n            <p>Player O: {this.state.oScore} </p>\n          </div>\n        </div>   \n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport Board from './Board';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";  \nimport shortid  from 'shortid';\nimport './Game.css';\n \nclass App extends Component {\n  constructor(props) {  \n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"ENTER_YOUR_PUBLISH_KEY_HERE\", \n      subscribeKey: \"ENTER_YOUR_SUBSCRIBE_KEY_HERE\"    \n    });\n    \n    this.state = {\n      piece: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    };\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;    \n    this.pubnub.init(this);\n  }  \n  \n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if(this.lobbyChannel != null){\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        // Start the game once an opponent joins the channel\n        if(msg.message.notRoomCreator){\n          // Create a different channel for the game\n          this.gameChannel = 'tictactoegame--' + this.roomId;\n\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n\n          this.setState({\n            isPlaying: true\n          });  \n\n          // Close the modals if they are opened\n          Swal.close();\n        }\n      }); \n    }\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0,5);\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n  // Open the modal\n  Swal.fire({\n    position: 'top',\n    allowOutsideClick: false,\n    title: 'Share this room ID with your friend',\n    text: this.roomId,\n    width: 275,\n    padding: '0.7em',\n    // Custom CSS\n    customClass: {\n        heightAuto: false,\n        title: 'title-class',\n        popup: 'popup-class',\n        confirmButton: 'button-class'\n    }\n  })\n\n    this.setState({\n      piece: 'X',\n      isRoomCreator: true,\n      isDisabled: true, // Disable the 'Create' button\n      myTurn: true, // Room creator makes the 1st move\n    });   \n  }\n  \n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'rgb(208,33,41)',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class ',\n        cancelButton: 'join-button-class'\n      } \n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if(result.value){\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    // Check the number of people in the channel\n    this.pubnub.hereNow({\n      channels: [this.lobbyChannel], \n    }).then((response) => { \n        if(response.totalOccupancy < 2){\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          \n          this.setState({\n            piece: 'O',\n          });  \n          \n          this.pubnub.publish({\n            message: {\n              notRoomCreator: true,\n            },\n            channel: this.lobbyChannel\n          });\n        } \n        else{\n          // Game in progress\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: 'Error',\n            text: 'Game in progress. Try another room.',\n            width: 275,\n            padding: '0.7em',\n            customClass: {\n                heightAuto: false,\n                title: 'title-class',\n                popup: 'popup-class',\n                confirmButton: 'button-class'\n            }\n          })\n        }\n    }).catch((error) => { \n      console.log(error);\n    });\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.setState({\n      piece: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    });\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;  \n\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  render() {  \n    return (  \n        <div> \n          <div className=\"title\">\n            <p>React Tic Tac Toe</p>\n          </div>\n\n          {\n            !this.state.isPlaying &&\n            <div className=\"game\">\n              <div className=\"board\">\n                <Board\n                    squares={0}\n                    onClick={index => null}\n                  />  \n                  \n                <div className=\"button-container\">\n                  <button \n                    className=\"create-button \"\n                    disabled={this.state.isDisabled}\n                    onClick={(e) => this.onPressCreate()}\n                    > Create \n                  </button>\n                  <button \n                    className=\"join-button\"\n                    onClick={(e) => this.onPressJoin()}\n                    > Join \n                  </button>\n                </div>                        \n          \n              </div>\n            </div>\n          }\n\n          {\n            this.state.isPlaying &&\n            <Game \n              pubnub={this.pubnub}\n              gameChannel={this.gameChannel} \n              piece={this.state.piece}\n              isRoomCreator={this.state.isRoomCreator}\n              myTurn={this.state.myTurn}\n              xUsername={this.state.xUsername}\n              oUsername={this.state.oUsername}\n              endGame={this.endGame}\n            />\n          }\n        </div>\n    );  \n  } \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}